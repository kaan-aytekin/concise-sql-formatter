// import Formatter from '../core/Formatter';
// import Tokenizer from '../core/Tokenizer';

const Formatter = require("../core/Formatter");
const Tokenizer = require("../core/Tokenizer");

const reservedWords = [
  "ABS",
  "ACCESSIBLE",
  "ACTION",
  "AGAINST",
  "AGGREGATE",
  "ALGORITHM",
  "ALL",
  "ALTER",
  "ANALYSE",
  "ANALYZE",
  "ANY_VALUE",
  "APPROX_COUNT_DISTINCT",
  "APPROX_QUANTILES",
  "APPROX_TOP_COUNT",
  "APPROX_TOP_SUM",
  "AS",
  "ASC",
  "AUTO_INCREMENT",
  "AUTOCOMMIT",
  "AVG",
  "BACKUP",
  "BEGIN",
  "BETWEEN",
  "BINLOG",
  "BOOL",
  "BOTH",
  "BYTES",
  "CASCADE",
  "CASE",
  "CAST",
  "CEIL",
  "CHANGE",
  "CHANGED",
  "CHARACTER SET",
  "CHARSET",
  "CHECK",
  "CHECKSUM",
  "COALESCE",
  "COLLATE",
  "COLLATION",
  "COLUMN",
  "COLUMNS",
  "COMMENT",
  "COMMIT",
  "COMMITTED",
  "COMPRESSED",
  "CONCURRENT",
  "CONSTRAINT",
  "CONTAINS",
  "CONVERT",
  "COUNT",
  "CREATE",
  "CROSS",
  "CURRENT_DATETIME",
  "CURRENT_TIMESTAMP",
  "DATABASE",
  "DATABASES",
  "DATE_ADD",
  "DATE_DIFF",
  "DATE_SUB",
  "DATE",
  "DATETIME",
  "DAY_HOUR",
  "DAY_MINUTE",
  "DAY_SECOND",
  "DAY",
  "DEFAULT",
  "DEFINER",
  "DELAYED",
  "DELETE",
  "DENSE_RANK",
  "DESC",
  "DESCRIBE",
  "DETERMINISTIC",
  "DISTINCT",
  "DISTINCTROW",
  "DIV",
  "DO",
  "DOUBLE",
  "DROP",
  "DUMPFILE",
  "DUPLICATE",
  "DYNAMIC",
  "ELSE",
  "ENCLOSED",
  "END",
  "ENGINE_TYPE",
  "ENGINE",
  "ENGINES",
  "ESCAPE",
  "ESCAPED",
  "EVENTS",
  "EXEC",
  "EXECUTE",
  "EXISTS",
  "EXP",
  "EXPLAIN",
  "EXTENDED",
  "FAST",
  "FETCH",
  "FIELDS",
  "FILE",
  "FIRST_VALUE",
  "FIRST",
  "FIXED",
  "FLOAT",
  "FLOAT64",
  "FLOOR",
  "FLUSH",
  "FOR",
  "FORCE",
  "FOREIGN",
  "FULL",
  "FULLTEXT",
  "FUNCTION",
  "GLOBAL",
  "GRANT",
  "GRANTS",
  "GREATEST",
  "GROUP_CONCAT",
  "HEAP",
  "HIGH_PRIORITY",
  "HOSTS",
  "HOUR_MINUTE",
  "HOUR_SECOND",
  "HOUR",
  "IDENTIFIED",
  "IF",
  "IFNULL",
  "IGNORE",
  "IN",
  "INDEX",
  "INDEXES",
  "INFILE",
  "INSERT_ID",
  "INSERT_METHOD",
  "INSERT",
  "INT64",
  "INTEGER",
  "INTERVAL",
  "INTO",
  "INVOKER",
  "IS",
  "ISOLATION",
  "KEY",
  "KEYS",
  "KILL",
  "LAG",
  "LAST_INSERT_ID",
  "LAST_VALUE",
  "LEAD",
  "LEADING",
  "LEAST",
  "LEVEL",
  "LIKE",
  "LINEAR",
  "LINES",
  "LOAD",
  "LOCAL",
  "LOCK",
  "LOCKS",
  "LOGS",
  "LOW_PRIORITY",
  "LOWER",
  "MARIA",
  "MASTER_CONNECT_RETRY",
  "MASTER_HOST",
  "MASTER_LOG_FILE",
  "MASTER",
  "MATCH",
  "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR",
  "MAX_ROWS",
  "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS",
  "MAX",
  "MEDIUM",
  "MERGE",
  "MIN_ROWS",
  "MIN",
  "MINUTE_SECOND",
  "MINUTE",
  "MODE",
  "MODIFY",
  "MONTH",
  "MRG_MYISAM",
  "MYISAM",
  "NAMES",
  "NATURAL",
  "NOT",
  "NOW()",
  "NTH_VALUE",
  "NULL",
  "NULLIF",
  "NUMERIC",
  "OFFSET",
  "ON DELETE",
  "ON UPDATE",
  "ONLY",
  "OPEN",
  "OPTIMIZE",
  "OPTION",
  "OPTIONALLY",
  "OUTFILE",
  "OVER",
  "PACK_KEYS",
  "PAGE",
  "PARTIAL",
  "PARTITION",
  "PARTITIONS",
  "PASSWORD",
  "PERCENTILE_CONT",
  "PERCENTILE_DISC",
  "PRIMARY",
  "PRIVILEGES",
  "PROCEDURE",
  "PROCESS",
  "PROCESSLIST",
  "PURGE",
  "QUICK",
  "RAID_CHUNKS",
  "RAID_CHUNKSIZE",
  "RAID_TYPE",
  "RAID0",
  "RAND",
  "RANGE",
  "RANK",
  "READ_ONLY",
  "READ_WRITE",
  "READ",
  "REFERENCES",
  "REGEXP_CONTAINS",
  "REGEXP",
  "RELOAD",
  "RENAME",
  "REPAIR",
  "REPEATABLE",
  "REPLACE",
  "REPLICATION",
  "RESET",
  "RESTORE",
  "RESTRICT",
  "RETURN",
  "RETURNS",
  "REVOKE",
  "RLIKE",
  "ROLLBACK",
  "ROUND",
  "ROW_FORMAT",
  "ROW_NUMBER",
  "ROW",
  "ROWS",
  "SAFE_CAST",
  "SAFE_DIV",
  "SAFE_OFFSET",
  "SECOND",
  "SECURITY",
  "SEPARATOR",
  "SERIALIZABLE",
  "SESSION",
  "SHARE",
  "SHOW",
  "SHUTDOWN",
  "SLAVE",
  "SONAME",
  "SOUNDS",
  "SPLIT",
  "SQL_AUTO_IS_NULL",
  "SQL_BIG_RESULT",
  "SQL_BIG_SELECTS",
  "SQL_BIG_TABLES",
  "SQL_BUFFER_RESULT",
  "SQL_CACHE",
  "SQL_CALC_FOUND_ROWS",
  "SQL_LOG_BIN",
  "SQL_LOG_OFF",
  "SQL_LOG_UPDATE",
  "SQL_LOW_PRIORITY_UPDATES",
  "SQL_MAX_JOIN_SIZE",
  "SQL_NO_CACHE",
  "SQL_QUOTE_SHOW_CREATE",
  "SQL_SAFE_UPDATES",
  "SQL_SELECT_LIMIT",
  "SQL_SLAVE_SKIP_COUNTER",
  "SQL_SMALL_RESULT",
  "SQL_WARNINGS",
  "SQL",
  "START",
  "STARTING",
  "STATUS",
  "STOP",
  "STORAGE",
  "STRAIGHT_JOIN",
  "STRING_AGG",
  "STRING",
  "STRIPED",
  "SUBSTR",
  "SUM",
  "SUPER",
  "TABLE",
  "TABLES",
  "TEMPORARY",
  "TERMINATED",
  "TIMESTAMP_ADD",
  "TIMESTAMP_DIFF",
  "TIMESTAMP_SUB",
  "TIMESTAMP",
  "TO",
  "TRAILING",
  "TRANSACTIONAL",
  "TRIM",
  "TRUE",
  "TRUNCATE",
  "TYPE",
  "TYPES",
  "UNCOMMITTED",
  "UNIQUE",
  "UNLOCK",
  "UNSIGNED",
  "UPPER",
  "USAGE",
  "USE",
  "USING",
  "VARCHAR",
  "VARIABLES",
  "VIEW",
  "WHEN",
  "WITH",
  "WORK",
  "WRITE",
  "YEAR_MONTH",
];

const reservedTopLevelWords = [
  "ADD",
  "AFTER",
  "ALTER COLUMN",
  "ALTER TABLE",
  "CROSS JOIN",
  "DELETE FROM",
  "EXCEPT",
  "FETCH FIRST",
  "FROM",
  "GO",
  "GROUP BY",
  "HAVING",
  "INNER JOIN",
  "INSERT INTO",
  "INSERT",
  "JOIN",
  "LEFT JOIN",
  "LEFT OUTER JOIN",
  "LIMIT",
  "MODIFY",
  "ORDER BY",
  "OUTER JOIN",
  "RIGHT JOIN",
  "RIGHT OUTER JOIN",
  "SELECT DISTINCT",
  "SELECT",
  "SET CURRENT SCHEMA",
  "SET SCHEMA",
  "SET",
  "UPDATE",
  "VALUES",
  "WHERE",
];

const reservedTopLevelWordsNoIndent = [
  "INTERSECT ALL",
  "INTERSECT",
  "MINUS",
  "UNION ALL",
  "UNION DISTINCT",
  "UNION",
];

const reservedNewlineWords = [
  "AND",
  "CROSS APPLY",
  "ELSE",
  "ON",
  "OR",
  "OUTER APPLY",
  "THEN",
  "USING",
  "WHEN",
  "XOR",
];

let tokenizer;

class StandardSqlFormatter {
  /**
   * @param {Object} cfg Different set of configurations
   */
  constructor(cfg) {
    this.cfg = cfg;
  }

  /**
   * Format the whitespace in a Standard SQL string to make it easier to read
   *
   * @param {String} query The Standard SQL string
   * @return {String} formatted string
   */
  format(query) {
    if (!tokenizer) {
      tokenizer = new Tokenizer({
        reservedWords,
        reservedTopLevelWords,
        reservedNewlineWords,
        reservedTopLevelWordsNoIndent,
        stringTypes: [`""`, "N''", "''", "``", "[]"],
        openParens: ["(", "CASE"],
        closeParens: [")", "END"],
        indexedPlaceholderTypes: ["?"],
        namedPlaceholderTypes: ["@", ":"],
        lineCommentTypes: ["#", "--"],
      });
    }
    return new Formatter(this.cfg, tokenizer).format(query);
  }
}

module.exports = StandardSqlFormatter;
